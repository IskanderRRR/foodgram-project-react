name: Django-app workflow

on: [push]

jobs: 
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        cd backend/
        pip install -r requirements.txt 
    - name: Test with flake8 and pytest
      run: |
        #  python -m flake8 
        #  pytest
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1 
      - name: Login to Docker 
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2 
        with:
          push: true
          context: ./backend/
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
        
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
    - name: executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        script: |
            docker compose stop
            docker compose rm backend
            docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
            rm .postgresql
            touch .postgresql
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .postgresql
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .postgresql
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .postgresql
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .postgresql
            echo DB_HOST=${{ secrets.DB_HOST }} >> .postgresql
            echo DB_PORT=${{ secrets.DB_PORT }} >> .postgresql
            echo PASSPHRASE=${{ secrets.PASSPHRASE }} >> .postgresql
            docker compose up -d
            docker compose exec -T backend python manage.py makemigrations
            docker compose exec -T backend python manage.py migrate
            docker compose exec -T backend python manage.py collectstatic --noinput
            docker compose exec -T backend python manage.py load_data_csv
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!
